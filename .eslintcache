[{"C:\\Users\\berka\\OneDrive\\Masaüstü\\covid-19-tracker\\src\\index.js":"1","C:\\Users\\berka\\OneDrive\\Masaüstü\\covid-19-tracker\\src\\App.js":"2","C:\\Users\\berka\\OneDrive\\Masaüstü\\covid-19-tracker\\src\\components\\CountryPicker\\CountryPicker.jsx":"3","C:\\Users\\berka\\OneDrive\\Masaüstü\\covid-19-tracker\\src\\components\\Chart\\Chart.jsx":"4","C:\\Users\\berka\\OneDrive\\Masaüstü\\covid-19-tracker\\src\\components\\index.js":"5","C:\\Users\\berka\\OneDrive\\Masaüstü\\covid-19-tracker\\src\\api\\index.js":"6","C:\\Users\\berka\\OneDrive\\Masaüstü\\covid-19-tracker\\src\\components\\Cards\\Start.jsx":"7","C:\\Users\\berka\\OneDrive\\Masaüstü\\covid-19-tracker\\src\\components\\General\\General.jsx":"8","C:\\Users\\berka\\OneDrive\\Masaüstü\\covid-19-tracker\\src\\components\\Table\\Table.jsx":"9"},{"size":146,"mtime":1611965897563,"results":"10","hashOfConfig":"11"},{"size":1280,"mtime":1613596390703,"results":"12","hashOfConfig":"11"},{"size":997,"mtime":1613522837983,"results":"13","hashOfConfig":"11"},{"size":3185,"mtime":1613500282615,"results":"14","hashOfConfig":"11"},{"size":283,"mtime":1613596379339,"results":"15","hashOfConfig":"11"},{"size":1132,"mtime":1613521888881,"results":"16","hashOfConfig":"11"},{"size":2891,"mtime":1613334505639,"results":"17","hashOfConfig":"11"},{"size":4328,"mtime":1613432434470,"results":"18","hashOfConfig":"11"},{"size":12620,"mtime":1613604232412,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"nql56i",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},"C:\\Users\\berka\\OneDrive\\Masaüstü\\covid-19-tracker\\src\\index.js",[],["43","44"],"C:\\Users\\berka\\OneDrive\\Masaüstü\\covid-19-tracker\\src\\App.js",[],"C:\\Users\\berka\\OneDrive\\Masaüstü\\covid-19-tracker\\src\\components\\CountryPicker\\CountryPicker.jsx",[],"C:\\Users\\berka\\OneDrive\\Masaüstü\\covid-19-tracker\\src\\components\\Chart\\Chart.jsx",["45","46","47"],"import React, {useState, useEffect} from 'react';\r\nimport { fetchDailyData } from '../../api/index';\r\nimport {  Line, Bar } from 'react-chartjs-2';\r\nimport { Card, CardContent, Typography, Grid, Divider } from \"@material-ui/core\";\r\nimport styles from './Chart.module.css'\r\n\r\nconst Chart = ({data: { confirmed, recovered, deaths }, country}) => {\r\n    const [dailyData, setDailyData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n\r\n        //console.log(dailyData)\r\n        fetchAPI();\r\n    }, [])\r\n\r\n    const lineChart = (\r\n        dailyData\r\n        ? (<Line \r\n            data = {{\r\n                labels: dailyData.map(({date}) => date),\r\n                datasets: [{\r\n                    data: dailyData.map(({confirmed}) => confirmed),\r\n                    label: \"Infected\",\r\n                    borderColor: \"#3333ff\",\r\n                    fill: true\r\n                }, {\r\n                    data: dailyData.map(({deaths}) => deaths),\r\n                    label: \"Deaths\",\r\n                    borderColor: \"red\",\r\n                    backgroundColor: \"rgba(255, 0, 0, 0.5)\",\r\n                    fill: true\r\n                }],\r\n            }}\r\n        />) : null\r\n    );\r\n\r\n    const barChart = (\r\n        confirmed\r\n        ? (<Bar \r\n            data = {{\r\n                labels: ['Infected', 'Recovered', 'Deaths'],\r\n                datasets: [{\r\n                      label: 'People',\r\n                      backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\r\n                      data: [confirmed.value, recovered.value, deaths.value],\r\n                    },\r\n                  ],\r\n            }}\r\n            options = {{\r\n                legend: { display: false },\r\n                title: { display: true, text: `Current state in ${country}` },\r\n            }}\r\n        />) : null\r\n    );\r\n\r\n    return(\r\n        <div className={styles.container }>\r\n            {country ? barChart : lineChart}\r\n            <Divider light className={styles.divider } />\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={6}>\r\n                    <div className={styles.doubleChart }>\r\n                        <h3>Daily Global Cases</h3>\r\n                        {lineChart}\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    <div className={styles.doubleChart }>\r\n                        <h3>Current Cases</h3>\r\n                        {barChart}\r\n                    </div>\r\n                </Grid>\r\n            </Grid>\r\n            <Divider light className={styles.divider } />\r\n        </div>\r\n        // <div className={styles.container }>\r\n        //     {country ? barChart : lineChart}\r\n        //     <div className={styles.doubleChart }>\r\n        //         <h3>Line</h3>\r\n        //         <h3>Chart</h3>\r\n        //     </div>\r\n        //     <div className={styles.doubleChart }>\r\n        //         {lineChart}\r\n        //         {barChart}\r\n        //     </div>\r\n            \r\n        // </div>\r\n        \r\n    );\r\n};\r\n\r\nexport default Chart;","C:\\Users\\berka\\OneDrive\\Masaüstü\\covid-19-tracker\\src\\components\\index.js",[],"C:\\Users\\berka\\OneDrive\\Masaüstü\\covid-19-tracker\\src\\api\\index.js",[],"C:\\Users\\berka\\OneDrive\\Masaüstü\\covid-19-tracker\\src\\components\\Cards\\Start.jsx",["48","49","50"],"import React from \"react\";\r\n\r\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\r\nimport CountUp from \"react-countup\";\r\n\r\nimport cx from \"classnames\";\r\nimport styles from \"./Start.module.css\";\r\n\r\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n  if (!confirmed) {\r\n    return \"Loading...\";\r\n  }\r\n  return (\r\n    <div className={styles.container}>\r\n      <Grid container justify=\"center\">\r\n        <CardContent className={styles.content1}>\r\n          <Typography justify=\"center\" variant=\"h5\">COVID-19 CORONAVIRUS PANDEMIC</Typography>\r\n        </CardContent>\r\n      </Grid>\r\n      <Grid container justify=\"center\">\r\n        <CardContent className={styles.content1}>\r\n          <Typography color=\"textSecondary\">\r\n            {\"Last updated: \" + new Date(lastUpdate).toDateString()}\r\n          </Typography>\r\n        </CardContent>\r\n      </Grid>\r\n\r\n      {/* <Grid container spacing={3} justify=\"center\">\r\n        <Grid Grid item component={Card} xs={12} md={3} className={cx(styles.card , styles.infected)}>\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n            <Typography variant=\"h5\">\r\n                <CountUp start={0} end={confirmed.value} duration={2.5} separator=\".\" />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of Active Cases of COVID-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card , styles.recovered)}>\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n            <Typography variant=\"h5\">\r\n                <CountUp start={0} end={recovered.value} duration={2.5} separator=\".\" />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of Recoveriers From COVID-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card , styles.deaths)}>\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n            <Typography variant=\"h5\">\r\n                <CountUp start={0} end={deaths.value} duration={2.5} separator=\".\" />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of Deaths Caused by COVID-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n      </Grid> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n","C:\\Users\\berka\\OneDrive\\Masaüstü\\covid-19-tracker\\src\\components\\General\\General.jsx",["51"],"import React from \"react\";\r\n\r\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\r\nimport CountUp from \"react-countup\";\r\n\r\nimport cx from \"classnames\";\r\nimport styles from \"./General.module.css\";\r\n\r\nconst General = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n  let selected = \"the World\";\r\n\r\n  if (!confirmed) {\r\n    return \"Loading...\";\r\n  }\r\n  if(country){\r\n    selected = country;\r\n  }\r\n  return (\r\n    <div className={styles.container}>\r\n      {/* <Grid container justify=\"center\">\r\n        <CardContent className={styles.content1}>\r\n          <Typography justify=\"center\" variant=\"h5\">COVID-19 CORONAVIRUS PANDEMIC</Typography>\r\n        </CardContent>\r\n      </Grid>\r\n      <Grid container justify=\"center\">\r\n        <CardContent className={styles.content1}>\r\n          <Typography color=\"textSecondary\">\r\n            {\"Last updated: \" + new Date(lastUpdate).toDateString()}\r\n          </Typography>\r\n        </CardContent>\r\n      </Grid> */}\r\n      <Grid container spacing={3} justify=\"center\">\r\n        <Card className={styles.root}>\r\n          <CardContent className={styles.center}>\r\n              <h1 className={styles.head}>Infected</h1>\r\n              <Typography variant=\"h5\" className={styles.infected}>\r\n                  <CountUp start={0} end={confirmed.value} duration={2.5} separator=\".\" />\r\n              </Typography>\r\n              <Typography variant=\"body2\">\r\n                  Number of Active Cases of COVID-19 in {selected}\r\n              </Typography>\r\n          </CardContent>\r\n        </Card>\r\n        {/* <Grid Grid item component={Card} xs={12} md={3} className={cx(styles.card)}>\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n            <Typography variant=\"h5\">\r\n                <CountUp start={0} end={confirmed.value} duration={2.5} separator=\".\" />\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of Active Cases of COVID-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card)}>\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n            <Typography variant=\"h5\">\r\n                <CountUp start={0} end={recovered.value} duration={2.5} separator=\".\" />\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of Recoveriers From COVID-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card)}>\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n            <Typography variant=\"h5\">\r\n                <CountUp start={0} end={deaths.value} duration={2.5} separator=\".\" />\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of Deaths Caused by COVID-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid> */}\r\n      </Grid>\r\n      <Grid container spacing={3} justify=\"center\">\r\n        <Card className={styles.root}>\r\n          <CardContent className={styles.center}>\r\n              <h1 className={styles.head}>Recovered</h1>\r\n              <Typography variant=\"h5\" className={styles.infected}>\r\n                  <CountUp start={0} end={recovered.value} duration={2.5} separator=\".\" />\r\n              </Typography>\r\n              <Typography variant=\"body2\">\r\n                Number of Recoveriers From COVID-19 in {selected}\r\n              </Typography>\r\n          </CardContent>\r\n        </Card>\r\n      </Grid>\r\n      <Grid container spacing={3} justify=\"center\">\r\n        <Card className={styles.root}>\r\n          <CardContent className={styles.center}>\r\n              <h1 className={styles.head}>Deaths</h1>\r\n              <Typography variant=\"h5\" className={styles.infected}>\r\n                  <CountUp start={0} end={deaths.value} duration={2.5} separator=\".\" />\r\n              </Typography>\r\n              <Typography variant=\"body2\">\r\n                Number of Deaths Caused by COVID-19 in {selected}\r\n              </Typography>\r\n          </CardContent>\r\n        </Card>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default General;\r\n","C:\\Users\\berka\\OneDrive\\Masaüstü\\covid-19-tracker\\src\\components\\Table\\Table.jsx",["52"],"import React, {useState, useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { lighten, makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\n\r\nimport { fetchCountries } from '../../api/index';\r\n\r\nimport styles from './Table.module.css'\r\n\r\nfunction createData(name, calories, fat, carbs, protein) {\r\n  return { name, calories, fat, carbs, protein };\r\n}\r\n\r\nfunction createDataTable(name, confirmed, recovered, deaths) {\r\n  var active = confirmed - deaths - recovered;\r\n  var returnValue = {\r\n    name, confirmed, deaths, recovered, active\r\n  }\r\n  return returnValue;\r\n}\r\n\r\n\r\nlet rows = [];\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n  { id: 'name', numeric: false, disablePadding: true, label: 'Country' },\r\n  { id: 'total', numeric: true, disablePadding: false, label: 'Total Cases' },\r\n  { id: 'deaths', numeric: true, disablePadding: false, label: 'Deaths' },\r\n  { id: 'recovered', numeric: true, disablePadding: false, label: 'Recovered' },\r\n  { id: 'active', numeric: true, disablePadding: false, label: 'Active Cases' },\r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding=\"checkbox\">\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{ 'aria-label': 'select all desserts' }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align={headCell.numeric ? 'right' : 'left'}\r\n            padding={headCell.disablePadding ? 'none' : 'default'}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : 'asc'}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === 'light'\r\n      ? {\r\n          color: theme.palette.secondary.main,\r\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n        }\r\n      : {\r\n          color: theme.palette.text.primary,\r\n          backgroundColor: theme.palette.secondary.dark,\r\n        },\r\n  title: {\r\n    flex: '1 1 100%',\r\n  },\r\n}));\r\n\r\nconst EnhancedTableToolbar = (props) => {\r\n  const classes = useToolbarStyles();\r\n  const { numSelected } = props;\r\n\r\n  return (\r\n    <Toolbar\r\n      className={clsx(classes.root, {\r\n        [classes.highlight]: numSelected > 0,\r\n      })}\r\n    >\r\n      {numSelected > 0 ? (\r\n        <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\r\n          {numSelected} selected\r\n        </Typography>\r\n      ) : (\r\n        <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\r\n          All Countries\r\n        </Typography>\r\n      )}\r\n\r\n      {numSelected > 0 ? (\r\n        <Tooltip title=\"Delete\">\r\n          <IconButton aria-label=\"delete\">\r\n          </IconButton>\r\n        </Tooltip>\r\n      ) : (\r\n        <Tooltip title=\"Filter list\">\r\n          <IconButton aria-label=\"filter list\">\r\n          </IconButton>\r\n        </Tooltip>\r\n      )}\r\n    </Toolbar>\r\n  );\r\n};\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n  numSelected: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  paper: {\r\n    width: '100%',\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: 'rect(0 0 0 0)',\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: 'hidden',\r\n    padding: 0,\r\n    position: 'absolute',\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n}));\r\nlet i = -1\r\nexport default function EnhancedTable({data: { confirmed, recovered, deaths }, handleCountryChange}) {\r\n    const classes = useStyles();\r\n    const [order, setOrder] = React.useState('asc');\r\n    const [orderBy, setOrderBy] = React.useState('calories');\r\n    const [selected, setSelected] = React.useState([]);\r\n    const [page, setPage] = React.useState(0);\r\n    const [dense, setDense] = React.useState(false);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n\r\n    const [countries, setCountries] = useState([]);\r\n    \r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setCountries(await fetchCountries());\r\n        }\r\n\r\n        //console.log(dailyData)\r\n        fetchAPI();\r\n    }, [])\r\n    if(confirmed && i<=191){\r\n        \r\n        if(countries[i]){\r\n          if(countries[i] === \"Gambia\"){\r\n            i++;\r\n            let newData = createDataTable(countries[i-2], parseInt(confirmed.value), parseInt(recovered.value), parseInt(deaths.value));\r\n            rows.push(newData);\r\n          }\r\n          else{\r\n            if(countries[i-1]){\r\n              let newData = createDataTable(countries[i-1], parseInt(confirmed.value), parseInt(recovered.value), parseInt(deaths.value));\r\n              rows.push(newData);\r\n            }\r\n          }\r\n          console.log(countries)\r\n          handleCountryChange(countries[i]);\r\n        }\r\n        i++;\r\n    }\r\n    \r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    setOrder(isAsc ? 'desc' : 'asc');\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds = rows.map((n) => n.name);\r\n      setSelected(newSelecteds);\r\n      return;\r\n    }\r\n    setSelected([]);\r\n  };\r\n\r\n  const handleClick = (event, name) => {\r\n    const selectedIndex = selected.indexOf(name);\r\n    let newSelected = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1),\r\n      );\r\n    }\r\n\r\n    setSelected(newSelected);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const handleChangeDense = (event) => {\r\n    setDense(event.target.checked);\r\n  };\r\n\r\n  const isSelected = (name) => selected.indexOf(name) !== -1;\r\n\r\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n\r\n  return (\r\n    <div className={styles.container }>\r\n        <div className={classes.root}>\r\n        <Paper className={classes.paper}>\r\n            <EnhancedTableToolbar numSelected={selected.length} />\r\n            <TableContainer>\r\n            <Table\r\n                className={classes.table}\r\n                aria-labelledby=\"tableTitle\"\r\n                size={dense ? 'small' : 'medium'}\r\n                aria-label=\"enhanced table\"\r\n            >\r\n                <EnhancedTableHead\r\n                classes={classes}\r\n                numSelected={selected.length}\r\n                order={order}\r\n                orderBy={orderBy}\r\n                onSelectAllClick={handleSelectAllClick}\r\n                onRequestSort={handleRequestSort}\r\n                rowCount={rows.length}\r\n                />\r\n                <TableBody>\r\n                {stableSort(rows, getComparator(order, orderBy))\r\n                    .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                    .map((row, index) => {\r\n                    const isItemSelected = isSelected(row.name);\r\n                    const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                    return (\r\n                        <TableRow\r\n                        hover\r\n                        onClick={(event) => handleClick(event, row.name)}\r\n                        role=\"checkbox\"\r\n                        aria-checked={isItemSelected}\r\n                        tabIndex={-1}\r\n                        key={row.name}\r\n                        selected={isItemSelected}\r\n                        >\r\n                        <TableCell padding=\"checkbox\">\r\n                            <Checkbox\r\n                            checked={isItemSelected}\r\n                            inputProps={{ 'aria-labelledby': labelId }}\r\n                            />\r\n                        </TableCell>\r\n                        <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\r\n                            {row.name}\r\n                        </TableCell>\r\n                        <TableCell align=\"right\">{row.confirmed}</TableCell>\r\n                        <TableCell align=\"right\">{row.deaths}</TableCell>\r\n                        <TableCell align=\"right\">{row.recovered}</TableCell>\r\n                        <TableCell align=\"right\">{row.active}</TableCell>\r\n                        </TableRow>\r\n                    );\r\n                    })}\r\n                {emptyRows > 0 && (\r\n                    <TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\r\n                    <TableCell colSpan={6} />\r\n                    </TableRow>\r\n                )}\r\n                </TableBody>\r\n            </Table>\r\n            </TableContainer>\r\n            <TablePagination\r\n            rowsPerPageOptions={[5, 10, 25]}\r\n            component=\"div\"\r\n            count={rows.length}\r\n            rowsPerPage={rowsPerPage}\r\n            page={page}\r\n            onChangePage={handleChangePage}\r\n            onChangeRowsPerPage={handleChangeRowsPerPage}\r\n            />\r\n        </Paper>\r\n        <FormControlLabel\r\n            control={<Switch checked={dense} onChange={handleChangeDense} />}\r\n            label=\"Dense padding\"\r\n        />\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n",{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":4,"column":10,"nodeType":"59","messageId":"60","endLine":4,"endColumn":14},{"ruleId":"57","severity":1,"message":"61","line":4,"column":16,"nodeType":"59","messageId":"60","endLine":4,"endColumn":27},{"ruleId":"57","severity":1,"message":"62","line":4,"column":29,"nodeType":"59","messageId":"60","endLine":4,"endColumn":39},{"ruleId":"57","severity":1,"message":"58","line":3,"column":10,"nodeType":"59","messageId":"60","endLine":3,"endColumn":14},{"ruleId":"57","severity":1,"message":"63","line":4,"column":8,"nodeType":"59","messageId":"60","endLine":4,"endColumn":15},{"ruleId":"57","severity":1,"message":"64","line":6,"column":8,"nodeType":"59","messageId":"60","endLine":6,"endColumn":10},{"ruleId":"57","severity":1,"message":"64","line":6,"column":8,"nodeType":"59","messageId":"60","endLine":6,"endColumn":10},{"ruleId":"57","severity":1,"message":"65","line":26,"column":10,"nodeType":"59","messageId":"60","endLine":26,"endColumn":20},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"no-unused-vars","'Card' is defined but never used.","Identifier","unusedVar","'CardContent' is defined but never used.","'Typography' is defined but never used.","'CountUp' is defined but never used.","'cx' is defined but never used.","'createData' is defined but never used.","no-global-assign","no-unsafe-negation"]